// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// public/PhotoViewer.js
// public/index.html
// public/style.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicPhotoviewerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x4c\xb5\x01\x4c\x21\x8e\x74\xe8\xa5\x50\xe0\x02\xc5\x26\x05\x5a\xa4\xcd\x62\x13\xf7\x92\x06\x30\x2d\x8d\x2c\x66\x69\x52\x20\xa9\x18\x46\xa0\xff\x5e\xf0\xa1\x97\xed\xdd\x4d\x7b\xeb\xc5\x51\x46\x33\xdf\x7c\xf3\xcd\x43\xaf\x54\x81\xfe\x91\xf2\x4d\xb3\xfb\xa5\x66\xb7\xa2\xa8\x25\x13\x06\x96\xb0\x4e\x69\xcd\xd6\xb3\x99\x75\xa0\x75\x0d\x4b\x10\xb8\x87\xbf\x1a\x24\x6f\x33\x00\xe4\x19\x44\x1f\x5e\x19\xee\x51\x45\x8b\x19\x40\x41\x0d\xcd\xc0\xbe\x02\xa8\xa9\xa9\x32\x88\x6a\x96\x9b\x46\xa1\x4e\x9d\x03\x00\x97\xb4\x60\x62\x9b\x81\x51\x0d\x7a\x93\x46\x8e\xb9\xc1\x22\x83\xa7\x67\x6f\x29\x25\x2f\x50\xe9\xc1\x20\x37\x2f\x98\x9b\xde\xd0\xda\x9f\x9d\x6c\x84\x8b\xa2\xfa\x20\x72\x28\x1b\x91\x1b\x26\x05\x90\x38\x30\x30\x15\xd3\x49\x89\x26\xaf\x6e\xa8\xa1\x24\xf6\x81\x36\x12\x4d\x25\x0b\xdd\x31\xdd\x28\xa4\xc5\x47\xd5\xec\x36\x3a\x3b\x03\x63\x4b\x51\x46\xc3\xd2\x03\xda\xba\x12\x5d\x73\x66\x48\x94\x46\xf1\xf5\xd8\x27\xa9\x65\x4d\x46\x26\x53\xc1\x12\xa2\xa8\x33\x8c\x12\xc1\x12\x9e\x9e\x3b\x7b\x29\x15\x90\xdc\xda\x41\x96\x1e\x69\x48\xde\xe3\xb8\x3f\x97\xe0\xfd\x2e\x21\x4a\x7b\xdc\x09\x72\x52\x37\xba\x22\x43\x34\x80\xa0\x3b\xcc\x7c\xdc\x62\x64\xf6\x0d\xb2\xbf\x83\xb5\xed\xc9\xb7\xb3\xf0\xa0\xd0\x34\x4a\x8c\x33\x78\x97\xd6\x47\x15\x72\x2f\x6c\x4f\x1f\xfa\x26\x7e\xad\x1d\xa1\x21\x61\x00\xac\x9c\xaa\xc1\x2e\xdd\xea\xb7\x2f\xcc\x24\x3b\x59\x50\x4e\xa2\x0f\x1d\x28\x13\xdb\xab\xba\x92\x46\xea\x28\x4e\x74\x25\xf7\x83\xb8\x74\x4f\x99\x81\x4d\xc3\xbf\xdc\x04\x67\xe2\xe0\xbb\x61\x8a\xcf\xe7\x2c\x29\xd7\xff\x26\x69\xc5\x0a\xec\x92\x86\x8a\x73\x8e\x54\xf9\x72\x99\x14\xe7\x27\x66\x42\x65\xd4\xeb\x0e\x42\x8a\x92\xa9\xdd\x0d\x72\x34\x78\xaa\x18\xbe\xa2\x30\xef\x92\xcd\xab\x50\x38\x9c\x7b\xbf\x23\x47\x32\x5c\x8f\x41\xa6\xd4\x8f\xc5\x3c\xde\x97\xaf\xc8\xe4\x92\x7d\x53\xa1\x1e\xe3\x3f\x0e\x83\xbd\x36\xb9\x14\x06\x85\x5b\x3b\xcf\x8e\x33\x6d\x3e\x7a\x23\xe9\x17\x71\x5a\x5e\x38\x1b\xb0\xec\xa3\x3b\xd3\xc4\x2d\x1c\x93\xb1\x5b\x30\x5d\x7f\x77\x68\xda\xf1\xc9\xfa\xe4\x36\xe8\xa8\x6f\x0b\xb7\x52\x47\x75\x8e\x56\xb8\xcb\xc1\x4a\x20\xce\xfc\xc3\x32\x5c\x16\x3d\x0d\x3c\x61\xfb\xf4\x3c\x7d\x33\x94\x7b\xf2\xe6\xb4\x89\xed\x98\xfe\x56\xae\xea\x33\xc4\xd9\x8e\x6e\x71\x20\x60\xdb\x70\x7a\xfa\x14\xd6\x9c\xe6\x48\xd2\xbf\xd3\x8b\x74\x01\x91\xdd\xcc\xf7\x5c\xc3\xd1\x58\x5a\xdd\x06\xb1\xac\xe7\x8b\x64\xc2\x01\xf8\xc3\x36\x1d\x27\x85\xaf\xa8\x34\xfe\x81\x5a\xd3\x2d\x7e\x63\xe1\x76\xde\xa3\xa3\x1b\xfe\xed\xe8\x45\x71\x12\x90\x48\x1c\x12\x4e\x12\xb5\x8b\x99\x3d\x7f\xb3\x1e\x7e\x3c\x71\x43\x6b\xc2\x3d\x74\x12\x93\xf5\xc5\xdb\xe9\x77\xb3\x4d\x43\xcf\xd2\x8b\x37\x1b\xd7\xae\xed\x31\x4a\x4c\x85\x82\x28\xd4\xb5\x14\x1a\x61\xf9\x33\x74\xcf\xc9\x8b\xb6\xcb\xe8\x9c\x72\x6a\x61\x09\x2a\x15\x5b\x17\x5f\x1e\xe5\xa8\x0c\x89\x1e\x2b\x54\x08\x7b\xaa\x81\x0a\x40\xa5\xa4\x72\x14\xed\x8c\x1e\x64\xa3\xc0\xf1\xd0\x19\x44\x70\x69\x5f\x77\xf5\xbb\x1a\xdb\xf8\x1a\x66\xed\xa8\xb8\xe9\xcd\x08\x84\x7d\x85\xef\x2a\x6d\xbd\x08\xe4\xfc\xc7\x34\x83\xf9\xcd\xed\xdd\xed\xe3\xed\xdc\xf7\xac\x42\xea\xbf\xe0\x5d\x83\xe6\x41\xc9\xab\xc7\x43\x8d\xf3\x0c\xe6\xb4\xae\x39\xcb\xa9\x25\x93\x5a\x01\xae\x21\xaf\xa8\xd2\x68\x96\xab\xc7\x5f\xaf\x7e\x9a\x8f\x27\x60\x23\x8b\x43\x06\xbf\x3f\xdc\xff\x99\x68\xa3\x98\xd8\xb2\xf2\xd0\x73\x76\xd5\x7d\x47\x3b\x27\x87\xde\xc6\xdd\xf5\xd5\x92\x63\xc2\xe5\xd6\x39\x07\x7d\x26\xf2\x4c\x3e\x2c\x13\x75\xde\xd3\xff\xee\x53\x72\x46\xa5\x4f\xf7\x0f\x8f\xff\x5b\x8d\xfa\x31\xb6\xb3\x1b\x46\x38\xd9\x70\xb9\x21\x31\x8c\x5e\x5a\xcb\x80\x6e\xcf\x48\xc9\xb8\x5d\xcb\x3d\x13\x85\xdc\x27\xab\xcf\x77\x49\xae\x90\x76\xf3\xb7\xfa\x7c\x47\x6c\x4c\xd8\xc6\xe0\xc5\xa5\xaf\x3c\xa1\x5a\xb3\xad\x20\x16\x63\xe8\xd5\x3f\x01\x00\x00\xff\xff\x2e\x0e\x45\x11\xb3\x0a\x00\x00")

func publicPhotoviewerJsBytes() ([]byte, error) {
	return bindataRead(
		_publicPhotoviewerJs,
		"public/PhotoViewer.js",
	)
}

func publicPhotoviewerJs() (*asset, error) {
	bytes, err := publicPhotoviewerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/PhotoViewer.js", size: 2739, mode: os.FileMode(436), modTime: time.Unix(1633425558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x5b\x6f\xdb\x38\xf6\x7f\xef\xa7\xe0\xb0\x7f\xfc\xd3\x00\xa6\x44\xea\x66\xc9\xb0\x3c\x9d\xed\xec\xdb\x02\x5b\xa0\x33\x03\xec\xd3\x80\x96\x68\x89\x35\x45\x0a\x22\x65\x27\x2d\xf2\xdd\x17\xa4\x64\x5b\xbe\x24\x69\x81\x76\x53\x20\x21\x0f\x0f\xcf\xf5\xc7\xc3\x43\x75\xf9\xcb\xef\xff\xfe\xf0\xc7\x7f\x3e\xfe\x13\xd4\xa6\x11\xab\x37\x4b\xfb\x07\x14\x82\x6a\x9d\xc3\x7e\x8b\xd6\xb4\xd8\x56\x9d\xea\x65\x89\x9a\xde\xb0\x12\xae\xde\x00\xb0\xac\x19\x2d\xed\x00\x80\xa5\xe1\x46\xb0\xd5\xa7\x10\xfc\x26\xd6\x7d\x03\xfe\xe2\x6c\xcf\xba\xa5\x3f\x90\x07\x16\x5d\x74\xbc\x35\x40\x77\x45\x0e\x6b\x63\x5a\xbd\xf0\xfd\xa2\x94\xde\x67\x5d\x32\xc1\x77\x9d\x27\x99\xf1\x65\xdb\xf8\xbb\x9e\xbd\x0f\xbc\xc4\x23\x01\x5c\x2d\xfd\x61\xdb\x28\x43\x70\xb9\x05\x1d\x13\x39\xd4\xe6\x51\x30\x5d\x33\x66\x20\xa8\x3b\xb6\x79\x45\x66\xcf\xb7\xdc\xbc\x0f\xad\x54\xe2\x97\x5c\x1b\xbf\xd0\x7a\xa0\x7a\x0d\x97\x5e\xa1\x35\x04\xfe\xf7\x5a\x7a\x2d\xf5\xf3\x54\xe8\x67\x7d\xe5\xc0\x0f\x10\x8d\x78\xa1\xa4\x7e\x4e\xc1\x29\x42\x6d\xc7\x0a\x25\x25\x2b\xae\x22\xb4\x51\xd2\x68\xaf\xd2\x86\x1a\x5e\x78\x85\x6a\xe0\x74\xf3\x4d\x5e\xa5\x2a\xc1\x68\xcb\xb5\x65\xb7\xb1\x0b\x7e\xdd\xd0\x86\x8b\xc7\xfc\x5f\xd4\xa8\xc5\xbe\xaa\xcd\xfb\x10\xe3\xff\x2f\xb9\x6e\x05\x7d\xcc\xf5\x9e\xb6\xf0\x2a\x53\x2b\xf0\x7a\x1a\x1d\xc5\xe5\xc3\x61\xcc\x3f\x80\xcc\x4e\xd6\xaa\x7c\x9c\xa0\xb2\xa5\x65\xc9\x65\x85\x74\x43\x85\x18\x7d\x38\xfd\x5a\x96\x7c\x07\x78\x99\xc3\x9d\x03\x23\x9c\x6c\x2c\x94\x34\x94\x4b\xd6\x4d\x37\x0d\x3b\x56\xe3\xd8\xc2\x9b\x4c\xb6\x50\xc1\x2b\x89\x04\xdb\x18\x78\x0d\xf3\x9a\x4c\xb6\x59\xb5\x97\xfb\x3a\x5e\xd5\x06\x9e\x98\xac\x2f\xbd\x31\x4a\x4e\xcf\xd8\x40\xe8\xb7\xa8\xa1\x5d\xc5\x07\x65\x93\xa9\x93\x01\x8e\x8c\xa8\xed\x78\x43\xbb\x47\x08\xc0\xa2\xe4\x9a\xae\x05\x2b\x73\x68\x6a\xae\xbd\x96\x9a\x1a\xe4\x39\xb8\x6b\x79\x61\xfa\x8e\x69\xff\x0e\x82\x1d\x52\x72\x51\x08\x5e\x6c\x73\x58\xa9\x3f\xdb\x77\xff\xc7\x76\x4c\x9a\x7b\xb8\xfa\xb3\x05\x4b\xdd\x52\xa7\xda\x62\x2b\x87\xf6\xf7\x02\xd0\xae\x53\x7b\xd4\xb7\x0e\x63\x2d\x95\xab\xa5\x3f\xa8\xfe\x49\x7e\x4c\xdc\xd0\x4c\xb0\xc2\xb0\xd2\x13\x4c\x56\xa6\x06\x4b\x40\xce\x3d\x28\x04\xa3\xdd\x27\xc7\xc5\x95\x7c\x77\x0f\x57\x1f\x2c\x05\xe8\x03\xe9\xb6\x4b\x85\x50\x9a\xfd\xaf\xfc\xf9\x2e\x87\x4a\xb5\x97\x42\xd1\xf2\xd3\xc8\x68\x5d\xfa\x7d\xa4\xdd\xf6\xe5\xb0\xe3\x27\xbb\x53\x52\x59\xd9\xd3\xf3\x9a\x33\xfd\x16\x19\x55\x55\x82\xe5\xd0\xd0\xae\x62\x66\x01\xde\x96\x4c\x30\xc3\x50\x5b\x2b\xa3\x34\x5c\xfd\xee\xa6\xe0\xdd\xd7\xaf\xe0\x42\xc4\xd3\xd3\xfd\x6d\x27\x4d\x47\x75\xfd\x82\x87\x4b\x7f\x72\x66\xc7\xc9\xe4\x34\x03\x57\x4d\x46\xb8\x2c\xd6\xca\xd4\x93\x43\xb8\xec\xcf\xae\xb8\x8e\xd1\xb2\xe8\xfa\x66\x0d\xce\x2b\xc4\xa4\x40\x8c\xc5\x0b\xec\xd0\x46\x75\x39\x1c\xb8\xb9\x04\x6e\xef\x07\x3b\xd3\xef\xee\xcf\xf3\x3a\x38\xfa\x91\x9a\x7a\x3c\x70\x33\xe0\xb6\xb9\x43\x7a\x7f\x5e\x12\xe8\x58\x02\xdf\xc2\xd5\x10\x8c\x93\x75\xd3\xe4\xc0\xcb\x20\x6d\x94\x28\xad\xa5\x63\x94\xbe\x7e\x1d\x55\x48\xda\x30\xf0\xf4\xb4\xf4\xe9\x99\x1a\x5f\xf0\x69\x00\x7b\x71\x11\xbf\x61\x72\xa0\xd5\xdd\x79\x44\x77\x88\x6f\x72\x68\x81\xc7\x65\x35\x2d\xaa\xad\xd2\xdc\x9e\x3c\x54\x30\x69\x8e\xa5\xf5\xb8\xaf\xdf\x22\xdd\x72\x29\x59\xb7\x7a\x21\x69\x6f\x4e\xa9\xb1\xa5\x5b\xf7\xeb\x92\x77\xac\x30\xaa\xe3\x4c\x9f\x95\x70\x9b\xd1\x0d\x7f\x00\xee\x1e\x90\x4c\x40\x30\x51\x78\xca\xd1\x10\x1b\x9b\xa4\x61\xa4\x5f\x4d\xcf\xc0\xe7\x6d\xd9\xe3\xfd\x37\x57\xec\x8b\xa3\x6f\x53\x30\x8a\x39\xe6\xe0\x1a\xb9\xcf\xa7\xe1\x34\xbe\x08\xcb\xe1\x4a\x3b\xc1\x73\x1a\x92\x9a\x8b\x12\xed\x79\x69\x6a\x44\x50\xf8\xbe\x71\x40\xa9\x3a\x5e\xda\xbf\xc2\x42\x67\xad\x1e\x72\x48\x25\x6f\xa8\xcd\xd4\x02\x68\xc1\x4b\x76\x99\xa9\x31\x72\xbc\xa1\x15\xb3\x81\x53\xeb\xcf\xac\x30\xa7\xe8\xbb\x85\xb3\xd0\x38\xec\x1a\xba\xe6\xb2\x64\x0f\x39\x9a\xde\x9b\x5c\x0a\x2e\x19\x04\x8b\x01\xda\x6e\xaf\xd7\x77\x02\x82\x92\x1a\x6a\x41\x63\xd8\x41\x99\x67\xea\xbe\x59\x4b\xca\x85\x2d\x37\x76\xb9\xa0\xad\x35\xf4\xb0\x6e\x83\x79\xa1\x18\x80\x25\x6f\x2a\x30\xe2\x31\x87\x82\x7e\xb1\xa5\xb7\x66\xd6\xdd\x1c\x06\x18\xb7\x0f\x10\x2c\x5c\xc3\x75\xa9\xc4\xbf\x12\x75\x02\xf8\xc0\xbb\xe3\x25\x53\x47\xc7\x6d\x67\xe3\x0e\x9e\x3d\x9f\xbb\x0a\xb8\x50\xe7\x30\xc1\xf0\xa8\x2f\x0a\x20\x78\x68\x84\xd4\x43\x07\xb5\xf0\xfd\xfd\x7e\xef\xed\x43\x4f\x75\x95\x1f\x60\x8c\x7d\xbd\xab\x46\x96\xc5\x83\xed\x83\x6e\x31\x92\x2c\xcb\x7c\xb7\x0a\x57\x60\x59\xad\x0e\xfd\xf5\x5f\xd6\x1c\x7d\x68\xab\xc1\xb2\x72\x60\xe0\x85\x6a\x94\x92\x88\x57\x52\x75\xec\xda\x2b\x7b\x9c\x34\x03\x0f\x39\x8c\xbd\x30\x9b\x47\x61\x04\xc1\x63\x0e\x51\x92\x7a\x61\x90\xa4\x61\x0c\x6d\x99\x95\x7a\xa3\xba\x26\x87\x0d\x35\x1d\x7f\x78\x87\x3d\x12\xa7\x29\x8e\x93\x70\x1e\xe1\x38\x4b\xa2\x24\x98\x61\xfb\xcf\x23\x71\x86\x43\x4c\xc2\x38\x0b\x13\x9c\x12\x32\x43\x61\xe4\x05\x61\x18\x65\xc9\x3c\x08\xd2\x08\x47\x61\x3c\x43\x51\xe4\x25\x29\x99\xc7\x61\x84\x49\x96\x06\xf1\x3d\x80\x07\x63\x25\x04\xce\xb7\x11\x12\x6f\xf5\xae\xfa\x9b\x40\x7f\x05\x96\xae\x71\x71\xe7\x7e\x57\xfd\x1d\x41\x50\xe6\xb0\x09\xa2\x59\xea\x85\x29\xce\xe2\x50\x60\x8f\x64\x38\x9a\xc7\xb3\x20\xf0\xe6\x89\x1d\x0b\x92\x78\x59\x1c\x84\x29\x99\x21\x42\xbc\xd0\xfe\x04\x02\x91\xb9\x47\xa2\x20\x8d\xe7\x8e\xea\x46\xc1\x17\x08\xb4\xe9\xd4\x96\x21\x8b\xc8\x82\xb6\x39\x94\xbd\x10\x67\xd4\xcf\x8a\xcb\x0b\xf2\x98\xe4\xf8\x40\x38\x2c\x6f\xb8\x10\x39\x7c\xbb\x71\x3f\xe7\xd6\x77\x4c\x08\x26\xd5\xc1\x7e\xcf\xaa\x27\xe1\x2c\xf5\x12\xf7\x23\xb0\xb5\x7f\x1c\x93\xb9\x17\x58\xef\x22\x67\x69\xec\xc6\xce\xfe\x09\x75\x70\xe5\xa7\xdb\xef\x5b\xa0\x95\x6c\xa3\x57\xc0\xc1\xfb\x90\x08\xdb\xa9\x70\xb6\xff\x87\xad\x1d\x18\x60\x90\x45\x11\x20\x38\x88\x4e\xa8\x1f\x66\xa3\xa6\x2c\x8a\xbe\x17\xe0\xb7\x61\x3c\x89\xa8\x3b\x79\xee\xe4\xd8\x90\xc6\x69\xe6\x45\x41\x82\x83\x78\x16\xe1\xc4\x23\xf1\x3c\xcb\x0a\x3c\x43\x21\xf1\x82\x34\xcb\xe6\x29\x40\x41\xec\x85\x51\x8c\xc3\x60\x86\xe2\xc4\x4b\xe2\x20\x4b\x63\xe0\x86\x24\xc5\xd1\x94\x5a\xa3\x20\x89\xbd\x84\x24\xd9\x3c\x2a\x9c\x88\x79\x88\xc9\x0c\x1f\xb9\x09\x99\x59\x69\x71\x36\x15\x41\xc8\xec\x28\x61\x47\x62\xe2\xa5\x59\x94\xa5\xd6\x0a\x2b\x21\xc3\x38\xcc\xc0\x68\x03\x1e\x59\x43\x4c\x62\x70\xb1\xdd\xd2\xea\x89\xfe\x41\x7d\x96\xce\x67\x18\x4c\x8c\xb5\x92\x12\x82\x83\x10\x5c\x7a\x60\x05\xec\xd0\xc9\x00\x81\x67\xf8\x4b\x83\x82\x60\xee\x85\x84\xe0\x30\x9e\x91\x08\x7b\x38\x0c\x30\x09\x77\x88\x44\x81\x97\xcc\xe7\x18\x07\x82\xe0\xd4\x23\x59\x80\xc9\x7c\x36\xb7\xe7\x26\xcb\xb2\x44\xa0\x81\x4a\x30\x99\x12\xb1\x87\x31\xc1\x78\x3e\x73\xa3\x20\xcb\xc8\x97\x01\x2f\x7a\x67\x11\xe3\x8f\x90\x19\xa6\xe7\xcd\xd2\x55\x57\x71\x20\xd1\x0b\x82\xa0\x6b\x76\xec\xc6\x8a\x9a\x15\xdb\xb5\x7a\xb8\x51\xea\x65\xdb\x1b\x60\x1e\x5b\x36\xe1\x02\x3b\xd4\xa8\xd2\xbd\x26\xc7\xae\xd2\x92\xec\x65\xb4\xd8\x51\xd1\xb3\x43\x31\xdf\x32\x7b\x33\x4c\x75\xa0\xe1\x2a\x03\xd7\x17\xc1\xb4\xfd\x72\xac\x0d\xed\xb6\xc7\x0e\xeb\xc2\x19\x67\xfc\x39\xf1\xe5\x06\xf5\x30\xfd\x05\x21\xf0\x47\xcd\x35\xe0\x1a\x98\x9a\x81\x46\x95\x54\x00\x84\x56\x97\xf7\xfd\x79\x23\xed\xba\x75\xcb\x7a\xd6\x9e\x9c\xee\xae\x5f\x8e\xdd\xd9\xb4\x83\xb4\x1b\x50\xc9\xa9\x50\xd5\x51\x00\x72\x2f\xea\x53\x7f\x49\x7b\xa3\xd0\x8e\x75\x86\x17\x54\x58\xba\xda\xb1\x6e\x23\xd4\xde\xad\x5c\xe7\xe3\xaa\x25\x1a\xa4\xba\x67\x16\x2a\xd9\x86\xf6\xc2\xc0\x31\x5f\x03\xaf\x33\xde\xad\xdf\x7c\xaf\x80\xeb\x17\xf4\x20\xb2\x66\xb4\x3c\x6b\x2a\x8f\xdc\x75\x70\xc5\xec\xee\x47\xb8\xfa\xad\x63\xe0\x51\xf5\x40\xf7\xe3\x60\x4f\xa5\x01\x46\x81\x21\x9c\xe0\xfa\x1d\x02\x9e\x9e\x80\x0b\xf2\x8d\xa5\x15\x20\xe0\x57\x70\xa7\xef\xc0\x02\xdc\xdd\x81\xa7\xa7\x5f\x97\x7e\x1d\x5c\x19\x7f\x8d\xf6\x49\x3b\x7b\xc0\xe7\x0d\x37\x4e\x2d\xab\x33\xc0\x36\x5e\x2f\xb0\x03\x6b\xfc\xc0\xf8\xf4\x74\x2d\xec\xac\xb7\x3c\xd0\x7a\xf1\x5d\xf9\x03\xb7\x3a\xdc\xdb\x39\x5d\x7d\xa0\xb2\x60\xe2\xd9\x84\xbe\xde\x39\x1f\x5e\x99\x67\x6f\x7c\x25\x37\xbc\x6b\x86\x57\xe3\xf1\x73\xc5\x85\xe6\x61\xf5\xe6\xd3\xf7\x32\x13\x2f\x3f\x5f\x7e\xfc\xf9\xf8\x1e\x1c\xbf\x80\x62\xe7\x21\x97\xd5\x35\xda\x6e\x55\xd6\x73\x9d\xcf\xbf\xc9\x26\xec\xcf\xbd\xcc\x9e\x0b\xe3\x8b\x84\x1b\x6f\x70\x57\xc0\xc6\x8f\x15\x5c\x56\x2f\x54\xb1\x9b\x11\xfb\x71\x29\xf9\xf6\x84\xbc\x94\x8e\x93\x27\x97\x19\xb9\x8d\xb8\x6f\xcd\xc6\xab\xb9\xb8\x20\x3c\x3f\x9d\xe6\x60\x42\xbe\xfe\x02\xed\xf9\x1f\x6d\x2e\x86\xcf\x98\x57\x5f\x93\x97\xbe\x0d\xf5\xea\xcd\xd2\x1f\xfe\x53\xe0\xbf\x01\x00\x00\xff\xff\x1a\x04\xd9\x50\x25\x18\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 6181, mode: os.FileMode(436), modTime: time.Unix(1633425734, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x4d\x6f\xe3\x36\x10\x3d\x47\xbf\x62\x10\x63\xb1\xc9\xc2\x4a\x2c\x27\x76\xb7\xf4\xa9\x08\x5a\xec\x61\xd1\x1e\x7a\xe8\x99\x22\x47\xd2\xd4\x14\x29\x90\x94\x3f\x12\xa4\xbf\xbd\xa0\x28\x39\x52\xd6\xde\x2e\xd0\x43\x42\x91\x43\xf2\xbd\x79\x7c\x33\xae\x7c\xad\xe0\x25\x01\x28\x8c\xf6\x69\xc1\x6b\x52\x47\x06\x1f\xbf\x72\x6f\x3e\xce\xaf\xbf\xa0\xda\xa1\x27\xc1\xe1\x77\x6c\xf1\x7a\xfe\x8b\x25\xae\xe6\x8e\x6b\x97\x3a\xb4\x54\x6c\x86\x83\x8e\x9e\x91\x65\xab\xe6\x10\x56\x84\x51\xc6\xb2\xd9\x7a\xbd\x0e\xb3\x74\x8f\xf9\x96\x7c\x1a\xf7\xd5\xc6\xf8\x8a\x74\xc9\xb8\xf6\xc4\x15\x71\x87\xb2\xdb\x55\x9b\xe7\xd4\xb8\xc3\xfb\x6d\xa5\xe5\x47\x27\xb8\xc2\xb0\xc9\xe3\xc1\xa7\x16\xb5\x44\x1b\x62\xa6\xf1\x54\xd3\x33\x7e\xc5\x92\x72\x52\xe4\x8f\xc9\x6b\x92\xdc\xb5\xdb\xb4\xca\xe6\xd0\x8d\xcb\x7e\x7c\xe8\xc7\xc7\x7e\x5c\xf5\xe3\xba\x1f\x91\x4b\xd2\x65\xba\x3c\x28\x6e\x4b\x9c\x2e\x9e\x59\xaa\x51\x52\x5b\x4f\xd7\x5c\xcd\x95\x9a\x2e\x0d\xb7\x05\x3a\x81\x4a\xa0\x11\x28\x04\xf8\x6a\xfd\x3f\x54\x0f\x69\x52\xcd\x4b\xec\x9e\xae\x31\x8e\x3c\x19\xcd\x2c\x2a\xee\x69\x87\xdd\x06\xaa\xcb\x2e\x9a\x1b\x2b\xd1\xa6\x96\x4b\x6a\x1d\x83\x6c\x11\x1f\xa9\xe1\x32\x70\x64\xd0\x3d\xda\x6b\x92\x24\x77\xa2\x42\xb1\xcd\xcd\xa1\x3b\x26\xc9\x35\x8a\x1f\x19\xe4\xca\x88\xed\x66\x0c\x03\x6f\x38\xa7\x7b\x52\x85\x85\x67\xf0\xd0\x5b\xa0\xe6\xb6\x24\x9d\xe6\xc6\x7b\x53\x33\xc8\x96\xbd\x33\x5a\xeb\x8c\x65\xd0\x18\xd2\x1e\xed\xd4\x3e\xb0\xec\x77\x0d\x8e\x69\x1d\xda\xd4\xa1\x42\xe1\x19\x68\xa3\xf1\x64\x94\x0b\x11\x77\x3e\x70\x76\xf1\x94\x0d\xcf\x9d\x51\xad\x8f\x06\x33\x0d\x5b\xf6\x02\x59\x2a\x2b\xdf\xcf\x5e\x93\xe4\xfe\x13\x7c\x21\x89\xe0\x2b\x84\xdc\x9a\xbd\x43\xfb\xd1\x81\xc4\x82\xb7\xca\xc3\x49\xba\x4f\xf7\x23\x1d\x49\x37\xad\x9f\x3e\x11\x8c\xe1\x4c\xc3\x05\xf9\x23\x83\xc5\x05\x71\x2a\xec\x48\xc4\xf8\x9e\xa4\xaf\xba\xef\x48\xe7\xc9\x22\xf7\x08\x1c\x44\xeb\xbc\xa9\xcf\x70\xa8\xb9\xdd\x7e\x07\x3e\x64\x1b\xaf\x8e\x8f\xb7\x18\x43\x3e\xf4\x32\xf4\xa8\xc3\x34\xe7\x62\x5b\x5a\xd3\x6a\x99\xc6\x32\x87\x19\x22\x0e\x94\xfe\xd0\x50\x9b\xd6\x61\x6a\x76\x68\xe7\xc0\xa5\x04\x0e\xa5\xc5\xe3\xe8\x5c\x6c\x0f\x13\xa1\x58\x15\xf6\xf7\x72\xfd\x03\xef\xc8\x9f\x81\x14\x42\x74\x09\x58\xae\x5d\x61\x6c\xcd\xa0\xeb\x11\x37\xd9\xdd\xea\x36\x56\xc7\xf4\x0d\x58\x61\x44\xeb\xce\x5c\xdd\xd5\x06\x83\x65\x73\x00\x67\x14\x49\x98\xc9\xfc\xf3\x32\x5b\x5c\x48\xf5\x3f\x71\x83\x08\x7f\x55\xa8\x3b\x9b\xbc\x71\x70\xf1\x1b\xe5\xa0\x49\xae\x5a\x1c\x6b\xf2\xad\x6d\x58\x7f\xe2\x87\xf4\x58\x66\x3f\xaf\x7f\x7b\x08\x0c\xde\x7c\x71\x62\x10\x0e\xde\x93\x96\x24\xb8\x37\x16\x6e\x2a\x92\x12\x35\xec\x03\x4d\x6d\xfc\x40\xed\x76\xea\x1b\xc6\x0b\x8f\xb6\x03\x14\x46\x7b\xd4\x9e\xc1\xf5\xf5\xe6\xa2\x99\x4e\xfd\x22\x16\x58\xf4\xc3\x9f\x95\xd9\x4f\x89\x44\xd8\x21\xb7\x1f\x4c\x7b\xc4\xe5\x7d\x5b\xea\x71\xfc\x51\x5d\xce\x78\x82\x72\xf6\xd6\xe8\xff\x2c\x8b\x1e\xef\xea\xe2\x71\x62\xff\x9f\xe2\x6c\x28\x8e\xe1\x97\x6e\xf0\x4f\xf4\xce\xbe\xa2\xa8\x45\xdf\x72\x87\x82\x85\x87\xe6\xd0\xfd\x2d\xc6\xdd\x6d\x64\x22\x6b\x3c\xf7\x78\xf3\xb8\x92\x58\xde\x0e\xad\xec\x7b\xf1\xcb\xb1\xe0\xc1\x99\x6b\x73\x49\x16\x85\x37\x96\xd0\xc1\x4b\x72\xf5\x77\xeb\x3c\x15\xc7\xf4\xf4\x94\x02\x63\x8f\xf9\x36\xe2\x1a\x2e\x30\xcd\xd1\xef\x11\xf5\x26\xb9\x12\x0a\xb9\x65\x90\x1b\x5f\x6d\x92\xab\x33\xfa\xbf\x87\x53\x14\x10\x0b\x65\xb8\x67\x9d\xb2\x9b\xe4\x2a\xfe\x1e\x30\x58\xdc\xad\xb0\x86\x25\xd6\xe3\xab\x48\x2b\xd2\x98\xf6\x37\x5e\x75\x39\x24\x77\x21\x96\x92\x30\xfa\xe5\x7c\x6f\xbc\xd8\xd3\x80\xc1\x6a\xf1\x61\x68\x6b\x6f\xb3\x91\x68\xdd\xa7\x0a\xba\xa5\xab\xc5\x87\x39\x84\xff\x51\x3c\xb7\x2b\xfb\x6e\x34\xeb\x08\xb8\x5d\xf9\x92\x14\xa4\x14\x83\xd9\xd3\x53\xf6\x39\xfb\x75\x93\xbc\xfe\x1b\x00\x00\xff\xff\x34\x25\xdf\x4d\x35\x09\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 2357, mode: os.FileMode(436), modTime: time.Unix(1631485317, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/PhotoViewer.js": publicPhotoviewerJs,
	"public/index.html":     publicIndexHtml,
	"public/style.css":      publicStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"PhotoViewer.js": &bintree{publicPhotoviewerJs, map[string]*bintree{}},
		"index.html":     &bintree{publicIndexHtml, map[string]*bintree{}},
		"style.css":      &bintree{publicStyleCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
